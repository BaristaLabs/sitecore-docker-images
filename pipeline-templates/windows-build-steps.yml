steps:
  - powershell: |
      Test-NetConnection -ComputerName "$(assets.shared.folder.server)" -Port 445
      Invoke-Expression -Command "cmdkey /add:$(assets.shared.folder.server) /user:Azure\baristalabsdockerassets /pass:$(assets.azure.fileshare.password)"
      New-PSDrive -Name Z -PSProvider FileSystem -Root "\\$(assets.shared.folder.server)\docker-assets" -Persist -ErrorAction SilentlyContinue
    condition: eq(variables['assets.useDrive'], 'true')
    displayName: "Connect Asset Drive (optional)"
  - task: Docker@2
    displayName: "Docker registry login"
    inputs:
      containerRegistry: 'BaristaLabs_ACR'
      command: 'login'
  - powershell: |
      md -Force -Path Z:\Docker\Windows | Out-Null
      Stop-Service docker
      $daemon = Get-Content -Raw -Path C:\ProgramData\Docker\config\daemon.json | ConvertFrom-Json -AsHashtable
      $daemon["data-root"] = "Z:\Docker\Windows"
      ConvertTo-Json $daemon | Set-Content -Path C:\ProgramData\Docker\config\daemon.json
      Start-Service docker
    condition: eq(variables['assets.useDrive'], 'true')
    displayName: 'Set Docker Data Root (optional)'
  - checkout: self
    clean: true
  - powershell: |
      dism /Online /Enable-Feature=Containers
      $buildProps = @{
        InstallSourcePath = "$(windows.install.source.path)"
        SitecoreUsername = "$(sitecore.username)"
        SitecorePassword = "$(sitecore.password)"
        Registry = "$(container.registry.fullname)"
        SitecoreVersion = "$(build.sitecoreVersion)"
        Topology = $(build.sitecoreTopology)
        OSVersion = "$(build.windowsOSVersion)"
        IncludeSpe = [System.Convert]::ToBoolean($(build.includeSpe))
        IncludeSxa = [System.Convert]::ToBoolean($(build.includeSxa))
        IncludeJss = [System.Convert]::ToBoolean($(build.includeJss))
        IsolationMode = "$(build.isolationMode)"
        IncludeExperimental = [System.Convert]::ToBoolean($(build.includeExperimentalImages))
        SkipExistingImage = [System.Convert]::ToBoolean($(build.skipExistingImages))
      }
      .\Build.ps1 @buildProps -Verbose
    displayName: "Build Images"
  - powershell: |
      docker image prune --force
    condition: and(succeeded(), eq(variables['build.pruneImages'], 'true'))
    displayName: 'Prune images (optional)'